service: circleci


frameworkVersion: ">=1.1.0 <2.0.0"


plugins:
  - serverless-plugin-iopipe # https://github.com/iopipe/serverless-plugin-iopipe
  - serverless-webpack # https://github.com/serverless-heaven/serverless-webpack
  - serverless-domain-manager # https://github.com/amplify-education/serverless-domain-manager
  - serverless-plugin-warmup # https://github.com/FidelLimited/serverless-plugin-warmup
  - serverless-prune-plugin # https://github.com/claygregory/serverless-prune-plugin
  - serverless-offline # https://github.com/dherault/serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs8.10
  timeout: 15
  memorySize: 1024
  region: ${opt:region, 'eu-central-1'}
  environment:
    API_VERSION: v1
    DYNAMODB_TABLE_EXAMPLE: ${self:service}-${opt:stage, self:provider.stage}-example
    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}
    REGION: ${self:provider.region}
    S3_BUCKET_EXAMPLE: ${self:service}-${opt:stage, self:provider.stage}-example


package:
  individually: false
  exclude:
    - dist/**
    - test/**
    - coverage/**
    - .circleci/**
    - _optimize/**
    - _warmup/**
    - iopipe_handlers/**
    - '*.log'
    # - node_modules/**

################################### IAM MANAGEMENT ###################################
  iamRoleStatements:
    # allow function to access the dynamodb tables for mensa and meals
    - Effect: Allow 
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_EXAMPLE}"

    # allow the serverless-warmup plugin to ping lambdas
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - 
          - 'arn:aws:lambda'
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
    

####################################### Functions #######################################
functions:
  hello:
    handler: src/handlers/greetings.createHelloResponse
    events:
      - http:
          path: hello
          method: get


resources:
############################### CloudFormation Ressources ###############################
  Resources:

    ExampleDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EXAMPLE}


custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackIncludeModules: true
    includeModules: true
    packager: yarn
  domains:
    dev: api
    staging: staging-api
    prod: greetings

################################### DOMAIN MANAGEMENT ###################################
  customDomain: # https://api.tobiasrahloff.com/v1/hello
    domainName: ${self:custom.domains.${self:custom.stage}}.tobiasrahloff.com
    stage: ${opt:stage, self:provider.stage}
    basePath: ${self:provider.environment.API_VERSION}
    certificateName: "tobiasrahloff.com"
    createRoute53Record: true
    endpointType: 'edge'
    
############################# WARMUP MANAGEMENT #############################
  warmup:
    default: true
    folderName: '_warmup' # Name of the folder created for the generated warmup 
    name: ${self:service}-${opt:stage, self:provider.stage}-warmup
    schedule: 'cron(0/5 8-17 ? * MON-FRI *)' # Run WarmUP every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
    timeout: 20
    prewarm: true